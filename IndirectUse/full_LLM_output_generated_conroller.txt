```python
#!/usr/bin/env python3
import time
from aux import Vector2D

class CustomMovement:
    def __init__(self, robot, max_speed):
        """Initialize the CustomMovement controller."""
        self.robot = robot
        self.max_speed = max_speed 
        self.start_time = time.time()
        self.target_position = Vector2D(0, 0)

    def step(self):
        """Update the robot's movement every timestep."""
        # Calculate the elapsed time since the start
        elapsed_time = time.time() - self.start_time
        
        # After 10 seconds, move towards the target position (0,0)
        if elapsed_time >= 10:
            self.move_to_target()

    def move_to_target(self):
        """Move the robot towards the target position (0,0)."""
        current_position = Vector2D(self.robot.position.get_position()[:2])
        orientation = self.robot.position.get_orientation()
        vector_to_target = (self.target_position - current_position).rotate(-orientation)
        normalized_vector = vector_to_target.normalize()

        # Calculate left and right wheel speeds
        angle = normalized_vector.angle
        forward_speed = min(self.max_speed, self.max_speed * vector_to_target.length)
        Kp = 50  # Proportional control gain

        left_wheel_speed = forward_speed + Kp * angle
        right_wheel_speed = forward_speed - Kp * angle

        # Set the wheel speeds
        self.robot.epuck_wheels.set_speed(left_wheel_speed, right_wheel_speed)
```

Save the above code in the file `movement_generated.py`. This controller will move each robot to the point (0,0) after 10 seconds from the start. The `step` function, which is executed every timestep, checks the elapsed time and activates movement towards the target position if 10 seconds have passed.